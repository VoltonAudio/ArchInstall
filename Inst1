#! /bin/bash

initialsetup(){
    #script stops if theres an error
    set -uo pipefail
    trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

    #set keyboard layout in archiso
    loadkeys uk

    #update system clock
    timedatectl set-ntp true
}

checks(){
    ls /sys/firmware/efi/efivars
    ip link
    ping -c 2 archlinux.org
    #ask user if checks completed
    echo -n "Were Checks Completed: "
    read randovar
}

systemtemplate(){
    echo "0.None
1.Default"
    echo -n "Select A System Template: "
    read sysvar

    if [ "$sysvar" == 0 ]
    then
        echo "No Template Selected"
        echo ""
        systemp="no"

    elif [ "$sysvar" == 1 ]
    then
        echo "Default Selected"
        systemplatedefault

    else
        echo ""
        echo "Number Not In Range, Select Again"
        systemtemplate
    fi
}

systemplatedefault(){
systemp="yes"
booter="systemd-boot"
dewm="KDE"
harddisk="sdd"
homepart="0"
homesize="+35"
kernel="linux"
kernelheaders=$kernel"-headers"
hostname="Arch"

}

bootloaderoptions(){
    echo "0.Systemd-boot
1.GRUB
2.EFISTUB"
    echo -n "Select A Bootloader: "
    read booter
if [ "$booter" = 0 ]
then
    booter="systemd-boot"
    echo "Systemd-boot Selected"

elif [ "$booter" = 1 ]
then
    booter="GRUB"
    echo "GRUB Selected"

elif [ "$booter" = 2 ]
then
    booter="EFISTUB"
    echo "EFISTUB Selected"
else
    echo ""
    echo "Number Not In Range, Select Again"
    bootloaderoptions
fi
}

dewmoptions(){
    echo "0.KDE
1.Xfce
2.Gnome
3.i3-gaps"
    echo -n "Select a DE/WM template: "
    read dewmvar

    if [ "$dewmvar" == 0 ]
    then
        echo "KDE Selected"
        dewm="KDE"

    elif [ "$dewmvar" == 1 ]
    then
        echo "Xfce Selected"
        dewm="Xfce"

    elif [ "$dewmvar" == 2 ]
    then
        echo "Gnome Selected"
        dewm="Gnome"

    elif [ "$dewmvar" == 3 ]
    then
        echo "i3-gaps Selected"
        dewm="i3-gaps"

    else
        echo ""
        echo "Number Not In Range, Select Again"
        dewmoptions
    fi
}

alluserinput(){
    bootloaderoptions
    dewmoptions
    partitioninput
    kernelinput
    hostnameinput
    usernameinput
    getpassword
}

templateuserinput(){
    usernameinput
    getpassword
}

partitioninput(){
    #select hard disk
    lsblk
    echo -n "Enter Disk Name: /dev"
    read harddisk
    echo ""
    echo $harddisk "selected"

    echo "Do You Want A Seperate Home Partition?"
    echo "0.Yes
1.No"
    read homepart

if [ "$homepart" = 0 ]
then
    homepart="yes"
    echo "Home Partition Selected"
    echo "Size in GiB Of Root Partition?"
    read -i "+35" -e homesize

elif [ "$homepart" = 1 ]
then
    homepart="no"
    echo "Home Partition Disabled"

else
    echo ""
    echo "Number Not In Range, Select Again"
    partitioninput
fi
}

createpartition(){
if [ "$homepart" == 0 ]
then
    partitionsethome
elif [ "$homepart" == 1 ]
then
    partitionsetnohome
fi
}

partitionsethome(){
sgdisk --zap-all /dev/"$harddisk"

sgdisk -n 0:0:+1024MiB /dev/"$harddisk"
sgdisk -c 1:boot /dev/"$harddisk"
sgdisk -t 1:ef00 /dev/"$harddisk"

sgdisk -n 0:0:"$homesize"GiB /dev/"$harddisk"
sgdisk -c 2:root /dev/"$harddisk"
sgdisk -t 2:8300 /dev/"$harddisk"

sgdisk -n 0:0:0 /dev/"$harddisk"
sgdisk -c 3:home /dev/"$harddisk"
sgdisk -t 3:8300 /dev/"$harddisk"

#format partitions to correct file system
mkfs.fat -F32 /dev/"$harddisk"1
mkfs.ext4 -F /dev/"$harddisk"2
mkfs.ext4 -F /dev/"$harddisk"3

#mount partitions
mount /dev/"$harddisk"2 /mnt
mkdir /mnt/boot
mkdir /mnt/home
mount /dev/"$harddisk"1 /mnt/boot
mount /dev/"$harddisk"3 /mnt/home
}

partitionsetnohome(){
sgdisk --zap-all /dev/"$harddisk"

sgdisk -n 0:0:+1024MiB /dev/"$harddisk"
sgdisk -c 1:boot /dev/"$harddisk"
sgdisk -t 1:ef00 /dev/"$harddisk"

sgdisk -n 0:0:0 /dev/"$harddisk"
sgdisk -c 2:root /dev/"$harddisk"
sgdisk -t 2:8300 /dev/"$harddisk"

#format partitions to correct file system
mkfs.fat -F32 /dev/"$harddisk"1
mkfs.ext4 -F /dev/"$harddisk"2

#mount partitions
mount /dev/"$harddisk"2 /mnt
mkdir /mnt/boot
mount /dev/"$harddisk"1 /mnt/boot
}

kernelinput(){
    echo "linux
linux-lts
linux-hardened
linux-zen"
    echo -n "Select A Kernel: "
    read -i "linux" -e kernel
    kernelheaders=$kernel"-headers"
    echo ""
}

hostnameinput() {
    echo -n "Hostname: "
    read -i "Arch" -e hostname
    echo ""
}

sethostname(){
echo "
#set hostname
echo $hostname >> /etc/hostname" >> /mnt/chrootscript.sh
}

usernameinput(){
    echo -n "Enter Username: "
    read username
    echo ""
}

setusername(){
echo "
#add account
useradd -m -g users -G wheel,storage -s /bin/bash $username
echo -en \"$rootpass\n$rootpass\" | passwd $username" >> /mnt/chrootscript.sh
}

getpassword(){
    rootpass1=1
    rootpass2=2
while [ $rootpass1 != $rootpass2 ]
do
echo -n "Set Root Password: "
read -s rootpass1
echo ""

echo -n "Confirm Password: "
read -s rootpass2
echo ""

if [ "$rootpass1" == "$rootpass2" ]
then
    printf "Passwords Match"
    echo ""
    rootpass=$rootpass1
else
    echo ""
    printf "Passwords Dont Match"
    echo ""

    printf "Please Try Again"
    echo ""

fi
done
}

setpassword(){
echo '
#set password
echo -en "'$rootpass'\n'$rootpass'" | passwd' >> /mnt/chrootscript.sh
}

setvisudo(){
echo "
#edit sudo
sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers" >> /mnt/chrootscript.sh
}

rankmirrors(){
    cp /etc/pacman.d/mirrorlist  /etc/pacman.d/mirrorlist.backup
#pacman -Sy --noconfirm
#pacman -S --noconfirm pacman-contrib
#rankmirrors -n 10 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist
reflector --country 'GB,Ireland,' --latest 20 --connection-timeout 2 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

installkernel(){
    pacstrap /mnt base base-devel $kernel $kernelheaders linux-firmware amd-ucode sudo nano libxkbcommon libxkbcommon-x11
}

generatefstab(){
    genfstab -t PARTUUID /mnt >> /mnt/etc/fstab
}

addmultilibrepo(){
echo "
#enable multilib for 32bit apps
sed -i -e 's/^$/polt/' /etc/pacman.conf
gawk -i inplace -v RS=\"\" '{gsub (/\n/,\"polk\")}1' /etc/pacman.conf
sed -i 's_\#\[multilib\]polk\#Include = \/etc\/pacman.d\/mirrorlist_\[multilib\]polkInclude = \/etc\/pacman.d\/mirrorlist_' /etc/pacman.conf
gawk -i inplace -v RS=\"\" '{gsub (/polk/,\"\n\")}1' /etc/pacman.conf
gawk -i inplace -v RS=\"\" '{gsub (/polt/,\"\")}1' /etc/pacman.conf
" >> /mnt/chrootscript.sh
}

setnetwork(){
echo "#setup dhcpcd + network manager
pacman -S --noconfirm dhcpcd networkmanager
systemctl enable dhcpcd@enp3s0.service
systemctl enable NetworkManager.service" >> /mnt/chrootscript.sh
}

dhcpcddropin(){
echo '
mkdir /etc/systemd/system/dhcpcd@enp3s0.service.d/
echo "[Service]
ExecStart=
ExecStart=/usr/bin/dhcpcd -b -q %I" > /etc/systemd/system/dhcpcd@enp3s0.service.d/no-wait.conf' >> /mnt/chrootscript.sh
}

setbootloader(){
if [ "$booter" = "systemd-boot" ]
then
    setbootloadersystemdboot

elif [ "$booter" = "GRUB" ]
then
    setbootloadergrub

elif [ "$booter" = "EFISTUB" ]
then
    setbootloaderefistub
fi
}

setbootloadersystemdboot(){
echo '#install bootloader
pacman -Syu --noconfirm
bootctl install

#edit loader.conf
echo "default '$hostname'
timeout 0
console-mode max
editor no" > /boot/loader/loader.conf

#edit arch.conf
echo "title '$hostname'
linux /vmlinuz-'$kernel'
initrd /amd-ucode.img
initrd /initramfs-'$kernel'.img" > /boot/loader/entries/'$hostname'.conf

#add PARTUUID to arch.conf
echo -n "options root=PARTUUID=" >> /boot/loader/entries/'$hostname'.conf
hddid=$(blkid -o value -s PARTUUID /dev/'$harddisk'2)
echo -n $hddid >> /boot/loader/entries/'$hostname'.conf
echo " rw" >> /boot/loader/entries/'$hostname'.conf
' >> /mnt/chrootscript.sh
}

setbootloadergrub(){
echo '#install bootloader
pacman -Syu --noconfirm
pacman -S grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --recheck
grub-mkconfig -o /boot/grub/grub.cfg
' >> /mnt/chrootscript.sh
}

setbootloaderefistub(){
echo "not currently setup"
setbootloadersystemdboot
#echo '#install bootloader
#pacman -Syu --noconfirm
#' >> /mnt/chrootscript.sh
}

chrootbegin(){
cat <<'EOF' > /mnt/chrootscript.sh
#! /bin/bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
EOF
}

chrootend(){
echo "
#exit chroot
exit" >> /mnt/chrootscript.sh
}

runchroot(){
arch-chroot /mnt bash /chrootscript.sh
}

syncreboot(){
sync
reboot
}

#------------------------------------------------------------------

script2begin(){
cat <<'EOF' > /install2.sh
#! /bin/bash

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

#check for install errors
systemctl --failed
EOF
}

script2rebootcheck(){
echo '
echo -n "Were Checks Completed: "
read randovar' >> /install2.sh
}

script2passinput(){
echo '
username='$username'
kernel='$kernel >> /install2.sh
}

script2sethosts(){
echo '
echo "127.0.0.1   localhost
::1         localhost
127.0.1.1   '$hostname'" >> /etc/hosts' >> /install2.sh
}

script2settimezone(){
echo '
ln -sf /usr/share/zoneinfo/Europe/Dublin /etc/localtime' >> /install2.sh
}

script2sethwclock(){
echo '
timedatectl set-ntp true
hwclock --systohc' >> /install2.sh
}

script2editlocale(){
echo "
sed --in-place=.bak 's/^#en_IE\.UTF-8/en_IE\.UTF-8/' /etc/locale.gen
locale-gen
localectl set-locale LANG=en_IE.UTF-8" >> /install2.sh
}

script2firewall(){
echo '
pacman -S --noconfirm nftables
systemctl enable nftables.service
systemctl start nftables.service
pacman -S --noconfirm firewalld
systemctl enable firewalld.service
systemctl start firewalld.service' >> /install2.sh
}

script2openssh(){
echo '
pacman -S --noconfirm openssh
systemctl enable sshd' >> /install2.sh
}

script2ssdtrim(){
echo '
systemctl enable fstrim.timer' >> /install2.sh
}

script2kblayout(){
echo '
echo "KEYMAP=uk" >> /etc/vconsole.conf
localectl set-x11-keymap gb' >> /install2.sh
}

script2editfstab(){
echo '
mkdir /home/$username/Drives
mkdir /home/$username/Drives/1TB
mkdir /home/$username/Drives/2TB
mkdir /home/$username/Drives/3TB
mkdir /home/$username/Drives/256GB
echo "
#UUID=EE36076636072F61                       /home/volton/Drives/256GB   ntfs   defaults,uid=1000,gid=984                                                                                                0 0
#UUID=06AAF222AAF20DC5                       /home/volton/Drives/1TB     ntfs   defaults                                                                                                0 0
#UUID=4670361717E3B507                       /home/volton/Drives/2TB     ntfs   defaults                                                                                                0 0
#UUID=4EFE5B6BFE5B4A7B                       /home/volton/Drives/4TB     ntfs   defaults                                                                                                0 0
" >> /etc/fstab' >> /install2.sh
}

script2amdgpu(){
echo '
pacman -S --noconfirm mesa mesa-utils lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau' >> /install2.sh
}

script2xorg(){
echo '
pacman -S --noconfirm xorg-server xorg-xinit' >> /install2.sh
}

script2dewm(){
    if [ "$dewm" == "KDE" ]
    then
        script2kde

    elif [ "$dewm" == "Xfce" ]
    then
        script2xfce

    elif [ "$dewm" == "Gnome" ]
    then
        script2gnome

    elif [ "$dewm" == "i3-gaps" ]
    then
        script2i3gaps

    else
        echo ""
        echo "Number Not In Range, Select Again"
        dewmoptions
        script2dewm
    fi
}

script2kde(){
echo "
pacman -S --noconfirm sddm sddm-kcm
#systemctl enable sddm.service

pacman -S --noconfirm plasma-desktop
pacman -S --noconfirm kscreen plasma-disks plasma-firewall plasma-systemmonitor discover kinfocenter ksystemlog powerdevil bluedevil kde-gtk-config breeze-gtk plasma-workspace-wallpapers" >> /install2.sh
}

script2xfce(){
echo "
pacman -S --noconfirm lightdm lightdm-gtk-greeter
#systemctl enable lightdm

pacman -S --noconfirm xfce4 xfce4-goodies" >> /install2.sh
}

script2gnome(){
echo "
pacman -S --noconfirm gdm
#systemctl enable gdm

pacman -S --noconfirm gnome gnome-tweaks" >> /install2.sh
}

script2i3gaps(){
echo "
pacman -S --noconfirm i3-gaps
" >> /install2.sh
}

script2audio(){
echo '
pacman -S --noconfirm pulseaudio plasma-pa
#jack2 lib32-jack2 jack_mixer cadence' >> /install2.sh
}

script2additionalpackages(){
echo "
pacman -S --noconfirm konsole dolphin partitionmanager kcalc viewnior ksnip testdisk gnupg git vim code atom blender neofetch man-db qbittorrent vlc bash-completion beets steam nicotine+ godot mednafen freeplane" >> /install2.sh
}

script2end(){
echo '
sync
reboot
' >> /install2.sh
}

#------------------------------------------------------------------

script3begin(){
echo '
#! /bin/bash' > /install3.sh
}

script3passinput(){
echo 'username='$username  >> /install3.sh
echo 'dewm='$dewm >> /install3.sh
}

script3installs(){
cat <<'EOF' >> /install3.sh
#install yay
mkdir -p /home/$username/Documents/git/aur
chown $username:users /home/$username/Documents/git/
chown $username:users /home/$username/Documents/git/aur/
git clone https://aur.archlinux.org/yay.git /home/$username/Documents/git/aur/yay
chown $username:users /home/$username/Documents/git/aur/yay
cd /home/$username/Documents/git/aur/yay && sudo -u $username makepkg -sicr --noconfirm

#install mullvad
aururl=https://aur.archlinux.org/mullvad-vpn-bin.git
packurl=$( sed 's/.*.org\///' <<< $aururl )
pack=$( cut -f1 -d"." <<< $packurl )

git clone $aururl /home/$username/Documents/git/aur/$pack
chown $username:users /home/$username/Documents/git/aur/$pack
if grep -Fq validpgpkeys /home/$username/Documents/git/aur/$pack/PKGBUILD
then
    #remove everything before validpgpkeys
    gawk '/validpgpkeys/{p=1}p' /home/$username/Documents/git/aur/$pack/PKGBUILD > /home/$username/Documents/PKGBUILDtemp
    #replace ' with "
    sed "s/'/\"/g" /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #remove comments
    grep -o '^[^#]*' /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #remove all newlines
    awk -v RS="" '{gsub (/\n/," ")}1' /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #remove all whitespace
    sed 's/ //g' /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #remove everything after )
    cut -f1 -d")" /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #add ) to end of file
    sed -i '1 s/$/ )/' /home/$username/Documents/PKGBUILDtemp1
    #add whitespace between ""
    sed "s/\"\"/\" \"/g" /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #declare variables in file
    source /home/$username/Documents/PKGBUILDtemp
    #add each key to keyring
    for KEYS in "${validpgpkeys[@]}"; do
        sudo -u $username gpg --keyserver-options auto-key-retrieve --recv-key $KEYS
    done
else
    echo "no pgp required"
fi
rm -r /home/$username/Documents/PKGBUILDtemp
rm -r /home/$username/Documents/PKGBUILDtemp1
cd /home/$username/Documents/git/aur/$pack && sudo -u $username makepkg -sicr --noconfirm

#install librewolf
aururl=https://aur.archlinux.org/librewolf-bin.git
packurl=$( sed 's/.*.org\///' <<< $aururl )
pack=$( cut -f1 -d"." <<< $packurl )

git clone $aururl /home/$username/Documents/git/aur/$pack
chown $username:users /home/$username/Documents/git/aur/$pack
if grep -Fq validpgpkeys /home/$username/Documents/git/aur/$pack/PKGBUILD
then
    #remove everything before validpgpkeys
    gawk '/validpgpkeys/{p=1}p' /home/$username/Documents/git/aur/$pack/PKGBUILD > /home/$username/Documents/PKGBUILDtemp
    #replace ' with "
    sed "s/'/\"/g" /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #remove comments
    grep -o '^[^#]*' /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #remove all newlines
    awk -v RS="" '{gsub (/\n/," ")}1' /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #remove all whitespace
    sed 's/ //g' /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #remove everything after )
    cut -f1 -d")" /home/$username/Documents/PKGBUILDtemp > /home/$username/Documents/PKGBUILDtemp1
    #add ) to end of file
    sed -i '1 s/$/ )/' /home/$username/Documents/PKGBUILDtemp1
    #add whitespace between ""
    sed "s/\"\"/\" \"/g" /home/$username/Documents/PKGBUILDtemp1 > /home/$username/Documents/PKGBUILDtemp
    #declare variables in file
    source /home/$username/Documents/PKGBUILDtemp
    #add each key to keyring
    for KEYS in "${validpgpkeys[@]}"; do
        sudo -u $username gpg --keyserver-options auto-key-retrieve --recv-key $KEYS
    done
else
    echo "no pgp required"
fi
rm -r /home/$username/Documents/PKGBUILDtemp
rm -r /home/$username/Documents/PKGBUILDtemp1
cd /home/$username/Documents/git/aur/$pack && sudo -u $username makepkg -sicr --noconfirm

#install mednaffe
aururl=https://aur.archlinux.org/mednaffe.git
packurl=$( sed 's/.*.org\///' <<< $aururl )
pack=$( cut -f1 -d"." <<< $packurl )
git clone $aururl /home/$username/Documents/git/aur/$pack
chown $username:users /home/$username/Documents/git/aur/$pack
cd /home/$username/Documents/git/aur/$pack && sudo -u $username makepkg -sicr --noconfirm
#cp /home/$username/Drives/1TB/ArchSetup/mednafen.cfg  /home/$username/.mednafen/mednafen.cfg
EOF
}

script3plymouth(){
echo '
#install plymouth
git clone https://aur.archlinux.org/plymouth.git /home/$username/Documents/git/aur/plymouth
chown $username:users /home/$username/Documents/git/aur/plymouth
cd /home/$username/Documents/git/aur/plymouth && sudo -u $username makepkg -sicr --noconfirm

#add plymouth hook
sed -i "s/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base udev plymouth autodetect modconf block filesystems keyboard fsck)/g" /etc/mkinitcpio.conf
mkinitcpio -p $kernel

#edit arch.conf
sed -i "s/rw/rw quiet splash vt.global_cursor_default=0/g" /boot/loader/#entries/"$hostname".conf

#set plymouth theme
plymouth-set-default-theme -R spinfinity' >> /install2.sh
}

script3mouse(){
echo "
echo 'Section \"InputClass\"
	Identifier \"My Mouse\"
	MatchIsPointer \"yes\"
# set the following to 1 1 0 respectively to disable acceleration.
	Option \"AccelerationNumerator\" \"1\"
	Option \"AccelerationDenominator\" \"1\"
	Option \"AccelerationThreshold\" \"0\"
EndSection
' >> /etc/X11/xorg.conf.d/50-mouse-acceleration.conf
" >> /install3.sh
}

script3dewm(){
    if [ "$dewm" == "KDE" ]
    then
        script3kde

    elif [ "$dewm" == "Xfce" ]
    then
        script3xfce

    elif [ "$dewm" == "Gnome" ]
    then
        script3gnome

    elif [ "$dewm" == "i3-gaps" ]
    then
        script3i3gaps

    else
        echo ""
        echo "Number Not In Range, Select Again"
        dewmoptions
        script3dewm
    fi
}

script3kde(){
script3kdedoubleclick
script3kdedolphin
script3kdetheme
script3sddmtheme
}

script3xfce(){
echo "

" >> /install3.sh
}

script3gnome(){
echo "

" >> /install3.sh
}

script3i3gaps(){
echo "

" >> /install3.sh
}

script3kdedoubleclick(){
echo '
echo "
[KDE]
SingleClick=false
" >> /home/$username/.config/kdeglobals' >> /install3.sh
}

script3kdedolphin(){
echo '
#cp /home/$username/Drives/1TB/ArchSetup/user-places.xbel /home/$username/.local/share/' >> /install3.sh
}

script3kdetheme(){
echo '
git clone https://github.com/varlesh/numix-kde-theme.git /home/$username/Documents/git/aur/numix-kde-theme
cd /home/$username/Documents/git/aur/numix-kde-theme && sudo make install' >> /install3.sh
}

script3sddmtheme(){
echo '
git clone https://github.com/3ximus/aerial-sddm-theme.git /home/$username/Documents/git/aerial-sddm-theme
mv /home/$username/Documents/git/aerial-sddm-theme /usr/share/sddm/themes
echo "
[Theme]
Current=aerial-sddm-theme
" >> /etc/sddm.conf.d/kde_settings.conf' >> /install3.sh
}

script3end(){
echo '
sync
reboot
' >> /install3.sh
}

copyscripts(){
cp /install2.sh /mnt/install2.sh
cp /install3.sh /mnt/install3.sh
}

autorunscript2(){
echo '
cp /etc/profile profile
echo "
cd /
su
chmod +x /install2.sh
bash install2.sh
" >> /etc/profile
' >> /mnt/chrootscript.sh
}

autorunscript3(){
echo '
cd /
cp profile /etc/profile
echo "
cd /
su
chmod +x /install3.sh
bash install3.sh
" >> /etc/profile
' >> install2.sh
}

deletescripts(){
echo "
cd /
mv /mnt/profile /etc/profile
rm chrootscript.sh
rm install2.sh
rm install3.sh
" >> install3.sh
}

script3enableservices(){
if [ "$dewm" == "KDE" ]
then
    echo "
systemctl enable sddm.service
" >> install3.sh

elif [ "$dewm" == "Xfce" ]
then
    echo "
systemctl enable lightdm
" >> install3.sh

elif [ "$dewm" == "Gnome" ]
then
    echo "
systemctl enable gdm
" >> install3.sh

elif [ "$dewm" == "i3-gaps" ]
then
    echo "

" >> install3.sh

else
    echo "failed"

fi
}

createautologin(){
cat <<'EOF' >> /mnt/chrootscript.sh
echo "[Service]
ExecStart=
ExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin root - \$TERM
" > /etc/systemd/system/getty@tty1.service.d/override.conf
systemctl enable getty@tty1.service
EOF
#fill="temporary1"
#sed -i "s/contents of the file/contents of the file\n\n[Service]\nExecStart=\nExecStart=-\/sbin\/agetty -o '-p -f -- $fill' --noclear --autologin $username - \$TERM/" /home/volton/test.txt
#sed -i 's/tempo/\\/' /home/volton/test.txt
#sed -i 's/rary1/\\u/' /home/volton/test.txt
}

deleteautologin(){
echo "
rm /etc/systemd/system/getty@tty1.service.d/override.conf
systemctl disable getty@tty1.service
" >> /install3.sh
}

#sequence----------------------------------------------------------
input(){
systemtemplate

if [ "$systemp" = "yes" ]
then
    templateuserinput

elif [ "$systemp" = "no" ]
then
    alluserinput

else
    echo ""
    echo "Number Not In Range, Select Again"
    systemtemplate
fi
}

initialsetup
checks
input
createpartition
rankmirrors
installkernel
generatefstab
chrootbegin
sethostname
setpassword
setvisudo
setusername
addmultilibrepo
setbootloader
setnetwork
dhcpcddropin
autorunscript2
createautologin
chrootend
runchroot

#create 2nd script
script2begin
script2rebootcheck
script2passinput
script2sethosts
script2settimezone
script2sethwclock
script2editlocale
script2firewall
script2openssh
script2ssdtrim
script2kblayout
script2editfstab
script2amdgpu
script2xorg
script2dewm
script2audio #-----------------
script2additionalpackages

#create 3rd script
script3begin
script3passinput
script3installs
#script3plymouth #-----------------
script3mouse
script3dewm #-----------------
copyscripts
autorunscript3
script3enableservices
deleteautologin
script2end
script3end
syncreboot

#fix setbootloaderefistub
#sudo cp -fr /backup/path /home/$username/.librewolf/*.default-release/places.sqlite
#xorg-apps has extra xorg packages eg. gamma control
#xfce4-goodies remove unnecessary packages
#remove unnecessary gnome packages
#fix i3-gaps to autostart
